name: Qualify Code Dataset

on:
  workflow_dispatch:
  push:
    paths:
      - raw_data/**

jobs:
  qualify_code:
    runs-on: ubuntu-latest

    steps:
    # Checkout GitHub repository
    - name: Checkout Code
      uses: actions/checkout@v4.2.2

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v5.3.0
      with:
        python-version: '3.13'

    # Install Git LFS
    - name: Install Git LFS
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs
        git lfs install
    # Install Hugging Face CLI
    - name: Install Hugging Face CLI
      run: pip install -U "huggingface_hub[cli]"

    # Login to Hugging Face with Token
    - name: Authenticate with Hugging Face
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        git config --global credential.helper store
        huggingface-cli login --token $HF_TOKEN --add-to-git-credential

    # Clone Hugging Face Repository with LFS
    - name: Clone Hugging Face Repository
      run: |
        git lfs install
        git clone https://huggingface.co/datasets/bigcode/the-stack-smol huggingface_repo
        cd huggingface_repo
        git lfs pull
        ls -lh

    # Install dependencies and process files
    - name: Install Dependencies
      run: |
        pip install ruff

    # Process JSON file
    - name: Process JSON for PEP8 Compliance
      run: |
        mkdir -p phase1/qualified phase1/unqualified
        mkdir -p phase2/reformatted phase2/unfixable

        # Iterate over JSON and validate content
        jq -c '.[]' huggingface_repo/data/python/data.json | while read -r line; do
          content=$(echo "$line" | jq -r '.content')
          filename=$(echo "$line" | jq -r '.path' | sed 's/\//_/g')
          
          # Save content to a temporary file for validation
          echo "$content" > temp.py

          # Phase 1: Validate with ruff
          if ruff check temp.py; then
            echo "$line" >> phase1/qualified/$filename.json
          else
            echo "$line" >> phase1/unqualified/$filename.json
          fi
        done

        # Phase 2: Reformat and Revalidate
        for file in phase1/unqualified/*.json; do
          content=$(jq -r '.content' "$file")
          echo "$content" > temp.py
          
          # Reformat code
          ruff --fix temp.py
          
          # Revalidate
          if ruff check temp.py; then
            jq ".content = \"$(cat temp.py | jq -sR .)\"" "$file" > phase2/reformatted/$(basename "$file")
          else
            cp "$file" phase2/unfixable/
          fi
        done
          else
            cp "$file" "phase1/unqualified/$filename"
          fi
        done
